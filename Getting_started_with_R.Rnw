\documentclass[xcolor=dvipsnames, aspectratio=1610, 11pt]{beamer}
\usepackage[utf8]{inputenc}
\usepackage[T1]{fontenc} % so that dollar sign does not turn into pound when italic!!
\usepackage{amsmath,amssymb,lmodern} % nice T1 compatible fonts
\usepackage[UKenglish]{babel}
\usepackage{pdfpages} % to import pdf pages
\usepackage{ragged2e} % pour justifier le text, apr√®s il suffit de tapper \justifying avant le paragraphe
\usepackage{subcaption} % for captions below figures
\usepackage{eurosym} % for euro sign

\setbeamertemplate{navigation symbols}{}%no nav symbols
\usetheme[secheader]{Madrid}%
\usepackage{colourchange}% to change theme colours on the go

\def\r{{\bf R}}

\title{Getting started with R}
\author[IZW]{Alexandre Courtiol @rdataberlin}
\institute[]{Leibniz Institute of Zoo and Wildlife Research}%
\titlegraphic{
\vspace{1cm}
\centering
\includegraphics[height=2cm]{figures/izw_logo}
\hspace{2cm}
\includegraphics[height=2cm]{figures/FU}
}
\date[December 2022]{\small December 2022}%

\begin{document}
\selectmanualcolour{blue!75!black}%set main colour
\setlength{\topsep}{1pt} % space between input and output

<<knitr options, echo = FALSE, message = FALSE>>=
options(width = 100, 
        tibble.print_min = 3,
        tibble.print_max = 3)
library(knitr)
opts_chunk$set("size" = "scriptsize",
               "error" = TRUE,
               "fig.align" = "center",
               fig.width = 6,
               fig.asp = 0.64,
               out.width = "7cm",
               cache = FALSE)
@

\AtBeginSection[]{
    \begin{frame}
    \frametitle{Getting started with \r}
    \setcounter{tocdepth}{1}
    \tableofcontents[currentsection]
    \end{frame}
}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\begin{frame}
\titlepage
\end{frame}


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\begin{frame}[t]{What is \r?}
\r \ is a \underline{programming language} and software environment for statistical computing \& graphics

\pause
\vspace{2em}
Key points (for this course):

\vspace{1em}
\begin{itemize}
\item \r \ includes {\bf long-established parametric and non-parametric tests},\\ as well as cutting edge statistical methods
\end{itemize}
\end{frame}


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\begin{frame}[t]{What is \r?}
\r \ is a \underline{programming language} and software environment for statistical computing \& graphics

\vspace{2em}
Key points (general):

\vspace{1em}
\begin{itemize}
\item interactive (you can explore each step of your workflow in details)
\item flexible (you can create your own functions)
\item transparent (you use scripts which allows for reproducible research)
\item free (\url{https://www.r-project.org/COPYING})%GPL2
\item open (\url{https://github.com/wch/r-source})
\item honest (\url{https://bugs.r-project.org/bugzilla})
\item scalable (laptop/supercomputer; local/remote; Windows/MacOS/Linux/Unix)
\item rich (\url{https://rdrr.io}; \url{https://www.rdocumentation.org})
\item up to date (\url{http://dirk.eddelbuettel.com/cranberries/cran/updated})
\item friendly community (more on that later)
\end{itemize}
\end{frame}


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\begin{frame}{What is \r \ good for?}
\begin{columns}
\column[t]{0.4\linewidth}
\begin{block}{\r \ is good for:}
\begin{itemize}
  \item data manipulation
  \item statistical analyses
  \item plotting
  \item programming around data
\end{itemize}
\end{block}
\pause
\column[t]{0.4\linewidth}
\begin{block}{\r \ is not optimal for:}
\begin{itemize}
  \item data entry
  \item formal algebra
  \item general-purpose programming
  \item beginners (yet, getting easier)
\end{itemize}
\end{block}
\end{columns}
\end{frame}


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\begin{frame}{Getting started with \r}
  \setcounter{tocdepth}{1}
  \tableofcontents
\end{frame}


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\section{Installation}


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\begin{frame}{Installation steps}
  \begin{enumerate}
  %\item connect to the WIFI network \texttt{izw-gast} (check password on blackboard)%
  %\item set the internet proxy: 192.168.2.2:3128 (necessary at IZW, but usually not)
  %\item check that you do get internet access
  \item install \r: \url{https://cran.r-project.org/}
  \item install RStudio: \url{https://posit.co/download/rstudio-desktop/}
  \item open RStudio
  \end{enumerate}
\end{frame}


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\section{RStudio}
\subsection{introduction}


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\begin{frame}{The RStudio Integrated Development Environment (IDE)}
\begin{center}
\includegraphics[width=0.9\linewidth]{figures/RStudio.png}
\end{center}
\end{frame}


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\begin{frame}[fragile]{Why using RStudio?}
You can use \r \ without RStudio, but RStudio is:
\begin{itemize}
\item provided with more functionalities than the official \r \ IDE
\item integrated with several packages developed by RStudio (e.g. \verb`{readr}`)
\item suitable for both desktop and remote computers (web server) %so it looks the same on a cluster!
\item free and open source
\end{itemize}
\end{frame}


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\begin{frame}[fragile]{Overall structure}
\begin{itemize}
\item Top menu
\item Tool bar (small subset from the top menu)
\item 4 visible panes
\end{itemize}
\end{frame}


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{top menu}


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\begin{frame}[fragile]{The top menu}
\includegraphics[width = \linewidth]{figures/RStudio_topmenu.png}
\vfill
\large{10 most useful items:}
  \begin{itemize}
    \item \texttt{File $\rightarrow$ New File}
    \item \texttt{File $\rightarrow$ New Project...}
    \item \texttt{File $\rightarrow$ Import Dataset}
    \item \texttt{File $\rightarrow$ Save}
    \item \texttt{Edit $\rightarrow$ Undo}
    \item \texttt{Edit $\rightarrow$ Clear console}
    \item \texttt{Code $\rightarrow$ Comment/Uncomment Lines}
    \item \texttt{Tools $\rightarrow$ Global Options...}
    \item \texttt{Help $\rightarrow$ Check for Updates} (for updating RStudio, not \r, nor \r \ packages)
    \item \texttt{Help $\rightarrow$ Cheatsheets}
  \end{itemize}
\end{frame}


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\selectmanualcolour{red!75!black}
\begin{frame}[fragile]{Practice}
  \begin{enumerate}
    \item create a new project
    \item create a new \r \ Script file
    \item save the created \r \ Script file into the project folder directory
    \item have a look at the RStudio cheatsheet
  \end{enumerate}
\vfill
\textbf{NB:}
\begin{itemize}
\item a project is defined by a simple (text) file. Its main benefit is to open RStudio with the correct working directory set (that is, the one where the project file is)
\item an \r \ Script file is a (text) file where we can write \r \ code
\end{itemize}
\end{frame}
\selectmanualcolour{blue!75!black}%set main colour


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\begin{frame}[fragile]{My tips about the global options}
1. I never save or restore the workspace and so should you (default settings are DANGEROUS)
\begin{center}
\includegraphics[height=0.8\textheight]{figures/RStudio_settings.png}
\end{center}
\end{frame}


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\begin{frame}[fragile]{My tips about the global options}
2. I don't like parentheses and quotes auto-completion \& I like the native pipe
\begin{center}
\includegraphics[height=0.8\textheight]{figures/RStudio_settings2.png}
\end{center}
\end{frame}


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\begin{frame}[fragile]{My tips about the global options}
3. I activate all the code diagnostics (but one) offered by RStudio!
\begin{center}
\includegraphics[height=0.8\textheight]{figures/RStudio_settings3.png}
\end{center}
\end{frame}


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\begin{frame}[fragile]{My tips about the global options}
4. I sometimes use a black theme
\begin{center}
\includegraphics[height=0.8\textheight]{figures/RStudio_settings4.png}
\end{center}
\end{frame}


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\begin{frame}[fragile]{My tips about the global options}
5. I usually put the \texttt{Source} and the \texttt{Console} panes side-by-side
\begin{center}
\includegraphics[height=0.8\textheight]{figures/RStudio_settings5.png}
\end{center}
\end{frame}


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{the panes}


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\begin{frame}{The \texttt{Source} pane}
This is where you type the code you want to keep
\begin{center}
\includegraphics[height=0.8\textheight]{figures/RStudio_pane1.png}
\end{center}
\end{frame}


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\begin{frame}{The \texttt{Console} pane}
This is where you can run \r \ code directly
\begin{center}
\includegraphics[height=0.8\textheight]{figures/RStudio_pane2.png}
\end{center}
\end{frame}


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\begin{frame}{The other panes}
This is where everything else is
\begin{center}
\includegraphics[height=0.8\textheight]{figures/RStudio_pane34.png}
\end{center}
\end{frame}


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\begin{frame}[fragile]{Tips}
\begin{enumerate}
\item only use the \texttt{Console} pane to mess around
\item write proper \r \ code in the \texttt{Source} pane
\item comment thoroughly your \r \ script using \# signs
\item re-run frequently your entire script to make sure that it works\\
(after restarting the session: Session/Restart R)
\end{enumerate}
\end{frame}


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\section{Basics of the language}
\subsection{arithmetic}


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\begin{frame}[fragile]{Arithmetic \& Logic}
\begin{columns}[T]
\column{0.5\linewidth}
\r \ can perform basic arithmetic:
<<arithmetic>>=
1 + 1
1 - 1
2 * pi
3 / 2
5^2
5^(2 + 1)
Inf/Inf
@

\column{0.5\linewidth}
\pause
\r \ can perform logical operations:
<<logic1>>=
1 == 1
(1 == 1) & (1 == 2)
(1 == 1) | (1 == 2)
1 != 2
!(1 == 2)
2 >= 1
2 < 1
@
\end{columns}
\pause
\vspace{1em}
As for most other programming languages, avoid equality tests for floating-point numbers!
% https://www.gao.gov/assets/imtec-92-26.pdf
% https://web.ma.utexas.edu/users/arbogast/misc/disasters.html
<<logic4>>=
0.8 - 0.3 - 0.5 == 0.8 - 0.5 - 0.3
## check later ?all.equal() and ?dplyr::near()
@
\end{frame}


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\selectmanualcolour{red!75!black}
\begin{frame}[fragile]{Practice}
\vfill
\begin{center}
\begin{Huge}
Compute {\Huge $\sqrt{\frac{2^{3+1}}{\frac{4}{5\times{6}}}-20}$} % = 10
\end{Huge}
\end{center}
\vfill
\end{frame}
\selectmanualcolour{blue!75!black}


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{objects}


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\begin{frame}[fragile]{Creating objects}
Objects are being assigned using the ``arrow'' operator:
<<one plus one>>=
one_plus_one <- 1 + 1 ## storing the result
@
\pause
\vfill

Objects are being used through their name (that is the whole point):

<<display one plus one>>=
one_plus_one ## displaying the result
one_plus_one_plus_one <- one_plus_one + 1
one_plus_one_plus_one
@
\pause
\vfill

{\bf Tips:}
<<one times two>>=
(one_times_two <- 1 * 2) ## storing and displaying the result at once
@
\vfill
\pause
\begin{itemize}[<+->]
\item \verb+->+ works too (if you switch the left hand side and the right hand side)
\item ``\texttt{\_}'' and ``\texttt{.}'' are OK but avoid spaces \& other weird characters in names
\item names are CaSe sensITIVE
\end{itemize}
\end{frame}


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{functions}


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\begin{frame}[fragile]{Functions}
<<citation, eval=FALSE>>=
citation()  ## function showing how to cite R
@
<<citation run, eval=TRUE, echo=FALSE, size="tiny">>=
citation()
@
\vfill
\pause
<<help citation, eval=FALSE, tidy=FALSE>>=
help(citation) ## getting help for this function
@
\vfill
<<eval = FALSE>>=
?citation() ## same but shorter (syntactic sugar)
@
\vfill
\pause
\textbf{NB:} it is best to look at the help before using a function new to you!
\end{frame}


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\selectmanualcolour{red!75!black}
\begin{frame}[fragile]{Practice}
\vfill
\begin{center}
\begin{large}
Display the path of any file you want using \texttt{file.choose()}
\end{large}
\end{center}
\vfill
\end{frame}
\selectmanualcolour{blue!75!black}


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\begin{frame}[fragile]{Syntax for functions that take arguments}
Basic syntax:
<<example function>>=
sign(x = -5)

sign(-5)
@
\vfill
\pause
Both are synonymous, but:
\begin{itemize}
\item the first syntax is safer
\item the second syntax removes visual clutter
\end{itemize}
\end{frame}


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\begin{frame}[fragile]{Functions}
<<eval=F, echo=T>>=
mean()
@
<<eval=F, tidy=F>>=
?mean()
@
\begin{scriptsize}
\begin{verbatim}
Usage:
     mean(x, ...)
     ## Default S3 method:
     mean(x, trim = 0, na.rm = FALSE, ...)
     
Arguments:
       x: An R object.  Currently there are methods for numeric/logical
          vectors and date, date-time and time interval objects, and
          for data frames all of whose columns have a method.  Complex
          vectors are allowed for ‚Äòtrim = 0‚Äô, only.
    trim: the fraction (0 to 0.5) of observations to be trimmed from
          each end of ‚Äòx‚Äô before the mean is computed.  Values of trim
          outside that range are taken as the nearest endpoint.
   na.rm: a logical value indicating whether ‚ÄòNA‚Äô values should be
          stripped before the computation proceeds.
[...]
\end{verbatim}
\end{scriptsize}
\end{frame}


\begin{frame}[fragile]{Functions}
All these calls are equivalent:

<<>>=
mean(x = c(1, 5, 3, 4))
@

<<>>=
mean(c(1, 5, 3, 4))
@

<<>>=
vector.of.numbers <- c(1, 5, 3, 4)
mean(x = vector.of.numbers)
@

<<>>=
mean(vector.of.numbers)
@

<<>>=
c(1, 5, 3, 4) |> mean() ## see ?pipeOp
@

<<>>=
vector.of.numbers |> mean()
@

<<>>=
vector.of.numbers |> mean(x = _)
@
\end{frame}


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\selectmanualcolour{red!75!black}
\begin{frame}[fragile]{Practice}
<<>>=
new.vector <- c(1, 2, 3, NA, 5)
@
\vfill
\begin{large}
\begin{center}
Try to compute the mean of  \texttt{new.vector} using \texttt{mean()}!
\end{center}
\end{large}
\end{frame}
\selectmanualcolour{blue!75!black}


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\begin{frame}[fragile]{Finding functions}
To find the name of the function you are look for, you may try:
<<finding function, eval = FALSE>>=
??"linear model" ## if you want something that fits a linear model
@

or

<<finding function 2, eval = FALSE>>=
help.search(pattern = "linear model", package = "stats")  ## if you know where to look for
@

or

\begin{center}
\includegraphics[height = 5cm]{figures/RStudio_search_fn.png}
\end{center}
\end{frame}

\section{Packages}


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\begin{frame}[fragile]{The concept of an \r \ package}

Packages extend \r \ functionalities:
\begin{itemize}
\item for most users; e.g. \verb+{dplyr}+, \verb+{ggplot2}+
\item for specific users; e.g. \verb+{IsoriX}+, \verb+{hyenaR}+
\item for developers; e.g. \verb+{devtools}+, \verb+{Rcpp}+
\end{itemize}

\vfill
\pause
Key facts about packages:
\begin{itemize}
\item a package is just a folder (often compressed) containing functions, data \& documentation
\item a library is the installed version of the package (also a folder)
\item there are tons of packages out there:

\url{https://rdrr.io}; \url{https://www.rdocumentation.org}
\end{itemize}

%\vfill
%\pause
%\textbf{NB:} packages can be used to create research compendia!
\end{frame}


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\begin{frame}[fragile]{Installing a package}
In general, the installation procedure depends on:
\begin{itemize}
\item where the package is being hosted (local, CRAN, bioconductor, GitHub, other)
\item if the package contains sources in another language that have been compiled or not
\end{itemize}

\vfill
\pause
{\bf Tip:} in order to be able to install packages that require compilation (and thus have access to more or newer versions of packages), you need to install:

\begin{itemize}
\item \texttt{Rtools} if you use Windows (\url{https://cran.r-project.org/bin/windows/Rtools})
\item \texttt{clang} and \texttt{gfortran} (\url{https://cran.r-project.org/bin/macosx/tools})\\ or \texttt{Xcode} (\url{https://developer.apple.com/xcode}) if you use macOS
\item if you use Linux or Unix-based system, you should already have everything you need
\end{itemize}

\end{frame}


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\begin{frame}[fragile]{Installing a package}

Simple situation: the package is available as a binary file prepared for your system on CRAN
\vfill
You can use RStudio:
\begin{center}
\includegraphics[height = 4cm]{figures/RStudio_packages_installation.png}
\end{center}
\vfill
\pause
or you can type in the \texttt{Console} pane:
\vfill
<<install package, eval=FALSE>>=
install.packages("tidyverse")  ## install {tidyverse}
@
\end{frame}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\selectmanualcolour{red!75!black}
\begin{frame}[fragile]{Practice}
\begin{center}
\begin{large}
Install the \verb+{tidyverse}+!
\end{large}
\end{center}
\end{frame}
\selectmanualcolour{blue!75!black}


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%\begin{frame}[fragile]{Installing a package}
%Try to install the \verb`{tidyverse}` as shown previously\\
%\pause
%\vspace{1em}
%If the installation procedure does not start, abort, do the %following, and then try installing the package again!\\
%\vspace{1em}
%\begin{itemize}
%\item create or edit the file \texttt{.Renviron}:
%<<eval = FALSE>>=
%file.edit("~/.Renviron")
%@
%\item add to this file the following lines:
%
%\url{http_proxy=http://192.168.2.2:3128/}
%
%\url{https_proxy=http://192.168.2.2:3128/}
%\end{itemize}
%\pause
%\vfill
%{\bf Note:} if you do this, at home, you will have to comment the %lines inside the file for \r\ to be able to access internet
%\end{frame}


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\begin{frame}[fragile]{Loading a library}
That is always simple:
<<>>=
library(tidyverse)
@
\vfill
Contrary to the installation that is only needed once per \r \ installation, you need to load the libraries each time you open a new \r \ session!
\end{frame}


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\section{Manipulating data}


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{iris}


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\begin{frame}[fragile, t]{The \texttt{iris} dataset}
The \texttt{iris} dataset is readily available in \r; it is often used to illustrate statistical procedures (\url{https://en.wikipedia.org/wiki/Iris_flower_data_set})
\vfill
\begin{figure}
    \centering
    \begin{subfigure}[b]{0.3\textwidth}
        \begin{center}
        \includegraphics[height=3cm]{"figures/Iris_setosa"}
        \caption*{\emph{Iris setosa}\\ {\tiny \textcopyright Miya.m}}
        \end{center}
    \end{subfigure}
    \begin{subfigure}[b]{0.3\textwidth}
        \begin{center}
        \includegraphics[height=3cm]{"figures/Iris_versicolor"}
        \caption*{\emph{Iris versicolor}\\ {\tiny \textcopyright D.G.E. Robertson}}
        \end{center}
    \end{subfigure}
    \begin{subfigure}[b]{0.3\textwidth}
        \begin{center}
        \includegraphics[height=3cm]{"figures/Iris_virginica"}
        \caption*{\emph{Iris virginica}\\ {\tiny \textcopyright F. Mayfield}}
        \end{center}
    \end{subfigure}
\end{figure}
\vfill
<<>>=
colnames(iris)  ## shows the column names of the iris dataset
@
\end{frame}


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{data frames}


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\begin{frame}[fragile, t]{Data representation in \r}
The most common class of objects used for storing data in \r \ is the \underline{data frame}!\\
\vspace{1em}
\pause
Example: the \texttt{iris} dataset
<<iris>>=
iris
@
\end{frame}


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\begin{frame}[fragile, t]{Data representation in \r}
The most common class of objects used for storing data in \r \ is the \underline{data frame}!\\
\vspace{1em}
Example: the \texttt{iris} dataset
<<iris2>>=
head(iris)
@
\end{frame}


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\begin{frame}[fragile, t]{Data representation in \r}
The most common class of objects used for storing data in \r \ is the \underline{data frame}!\\
\vspace{1em}
Example: the \texttt{iris} dataset
<<iris3>>=
str(iris)
@
\end{frame}


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\begin{frame}[fragile, t]{Data representation in \r}
The most common class of objects used for storing data in \r \ is the \underline{data frame}!\\
\vspace{1em}
\begin{itemize}
\item each column usually corresponds to a \underline{vector} (a series of elements of 1 type)
\item all columns have the same length (rectangular format)
\item contains column names (usually informative) and row names (usually not informative)
\end{itemize}
\end{frame}


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\begin{frame}[fragile]{Data frames come in 2 flavours}
\begin{columns}[t]
\column{0.35\linewidth}
\begin{center}
\begin{block}{\centering original data frames\\ (class \texttt{data.frame})}
\begin{itemize}
\item perfectly fine to work with
\item don't rely on extra packages
\end{itemize}
\end{block}
\end{center}
\column{0.55\linewidth}
\begin{center}
\begin{block}{\centering modern data frames: tibbles\\ (class \texttt{tbl\_df})}
\begin{itemize}
  \item improved display (see \verb+?formatting+)
  \item lazier \& \underline{safer} (see \verb+?`tbl_df-class`+)
  \item more flexible (work well with groupings)
\end{itemize}
\end{block}
\end{center}
\end{columns}
\vspace{1em}
\pause
\textbf{Tip:} functions working with data frames usually work fine with tibbles, but in case of problems just try converting your tibble into an original data frame using \texttt{as.data.frame()}
\end{frame}


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\begin{frame}[fragile, t]{Tibbles}
You can easily turn an original data frame into a tibble
<<>>=
library(tidyverse)
iris_tbl <- as_tibble(iris) ## as.data.frame() does the opposite: tbl -> df
iris_tbl
@
\pause
\vspace{1em}
{\bf Note:} the tidyverse is a meta-package that loads several packages we are going to use
\end{frame}


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\begin{frame}[fragile]{Working with data frames}
There are two competing paradigms for manipulating data in \r:
\pause
\vspace{1em}
\begin{columns}[T]
\column{0.45\linewidth}
\begin{block}{Vector-focussed}
\begin{itemize}
\item easier for developers
\item more error prone, but easier to debug
\item more efficient (often)
\item dominant paradigm for first generations of \r\ users
\end{itemize}
\end{block}
\pause
\column{0.45\linewidth}
\begin{block}{Data frame-focussed}
\begin{itemize}
\item easier for users
\item closer to Excel, SPSS, \dots
\item \emph{functional programming} friendly
\item dominant paradigm for new generations of \r\ users
\end{itemize}
\end{block}
\end{columns}
\end{frame}


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\begin{frame}[fragile, t]{Vector based approach}
\textbf{Goal:} computing the mean and SD of sepal length in mm per species

\vfill
<<vector way>>=
## create a new column storing the sepal length in mm
iris$Sepal.Length.mm <- iris$Sepal.Length * 10

## create data frame to store results
results <- data.frame(Species = unique(iris$Species))

## compute the mean and SD per species
for (sp in unique(results$Species)) {
  results$meanSL[results$Species == sp] <- mean(iris$Sepal.Length.mm[iris$Species == sp])
  results$sdSL[results$Species == sp]   <- sd(iris$Sepal.Length.mm[iris$Species == sp])
}

## display the result
results
@
\end{frame}


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\begin{frame}[fragile, t]{Data frame based approach}
\textbf{Goal:} computing the mean and SD of sepal length in mm per species

\vfill
<<echo = FALSE>>=
rm(iris)
@
<<data frame way>>=
## create a new column storing the sepal length in mm
iris <- mutate(iris, Sepal.Length.mm = Sepal.Length * 10)

## declare that you will perform operations within species
iris <- group_by(iris, Species)

## compute the mean and SD per species
results <- summarise(iris, meanSL = mean(Sepal.Length.mm),
                           sdSL   = sd(Sepal.Length.mm))

## display the result
results
@
\end{frame}


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\begin{frame}[fragile, t]{Data frame based approach with pipes (\texttt{|>} or \texttt{\%>\%})}
\textbf{Goal:} computing the mean and SD of sepal length in mm per species

\vspace{1em}
<<echo = FALSE>>=
rm(iris)
@
<<data frame pipe way>>=
iris |>
  mutate(Sepal.Length.mm = Sepal.Length * 10) |>
  group_by(Species) |>
  summarise(meanSL = mean(Sepal.Length.mm),
            sdSL   = sd(Sepal.Length.mm)) -> results
results
@
\pause
\vspace{1em}
{\bf Note:} pipes capture what is on their left and forward this as the first argument of the function that comes on their right
\end{frame}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{\texttt{\{tidyverse\}}}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\begin{frame}[fragile]{The \texttt{\{tidyverse\}}}
The tidyverse (\url{https://www.tidyverse.org}) is an ecosystem of R packages.

\vspace{1em}
There are 8 core `tidy' packages:

\begin{center}
\raisebox{-0.5\height}{\includegraphics[width = 1.5cm]{"figures/tidyverse/hex-tidyverse"}}
=
\raisebox{-0.5\height}{\includegraphics[width = 1.5cm]{"figures/tidyverse/hex-tibble"}}
\raisebox{-0.5\height}{\includegraphics[width = 1.5cm]{"figures/tidyverse/hex-readr"}}
\raisebox{-0.5\height}{\includegraphics[width = 1.5cm]{"figures/tidyverse/hex-dplyr"}}
\raisebox{-0.5\height}{\includegraphics[width = 1.5cm]{"figures/tidyverse/hex-stringr"}}
\raisebox{-0.5\height}{\includegraphics[width = 1.5cm]{"figures/tidyverse/hex-forcats"}}
\raisebox{-0.5\height}{\includegraphics[width = 1.5cm]{"figures/tidyverse/hex-tidyr"}}
\raisebox{-0.5\height}{\includegraphics[width = 1.5cm]{"figures/tidyverse/hex-ggplot2"}}
\raisebox{-0.5\height}{\includegraphics[width = 1.5cm]{"figures/tidyverse/hex-purrr"}}
\end{center}
\pause
\vfill
\begin{itemize}
\item philosophy: making \r \ more accessible and more modern\\ % modern as linked to new libraries that are very efficient
\item more functions, more focussed: 1 function = 1 action = 1 verb
\item backward compatibility is not the absolute priority
\item open-source (collaborative) development supervised by Posit (formerly known as RStudio)
\end{itemize}
\end{frame}


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{\texttt{\{dplyr\}}}


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\begin{frame}[fragile, t]{Manipulating data frames with \texttt{\{dplyr\}}}
You can do a lot with 5 functions:\\
\vspace{1em}
\pause
\begin{itemize}
\item \texttt{select()}    to keep or discard columns
\item \texttt{group\_by()} to define groups of rows for the following verbs
\item \texttt{filter()}    to keep or discard rows
\item \texttt{mutate()}    to create or modify columns
\item \texttt{summarise()} to compute summary statistics
\end{itemize}
\vfill
\pause
{\bf Note:} this is much more than that in \texttt{\{dplyr\}}
\end{frame}


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\begin{frame}[fragile, t]{\texttt{select()}}
\begin{columns}[t]
\column{0.475\linewidth}
Keep columns using \texttt{select()}:\\
<<select details>>=
iris_tbl |>
  select(Sepal.Length, Sepal.Width)
@
\pause
\column{0.475\linewidth}
Discard columns using \texttt{select()}:\\
<<select details2>>=
iris_tbl |>
  select(-Sepal.Length, -Sepal.Width)
@
\end{columns}
\end{frame}


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\begin{frame}[fragile, t]{\texttt{filter()}}
Keep rows using \texttt{filter()}:\\
<<filter details>>=
iris_tbl |> filter(Sepal.Length > 7, Sepal.Width > 3)
@
\pause
\vspace{1em}
Keep rows using \verb`group_by() |> filter()`:\\
<<filter details2>>=
iris_tbl |> group_by(Species) |> filter(Sepal.Length == max(Sepal.Length)) |> ungroup()
@
\pause
\vfill
{\bf Tip:} ungrouping prevents further (unwanted) grouped operations
\end{frame}


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\begin{frame}[fragile, t]{\texttt{mutate()}}
Create a column using \texttt{mutate()}:\\
<<mutate details>>=
iris_tbl |> mutate(Sepal.Length.mm = Sepal.Length * 10)
@
\pause
Create a column using  \verb`group_by() |> mutate()`:\\
<<mutate details2>>=
iris_tbl |> group_by(Species) |> mutate(Sepal.Length.max = max(Sepal.Length)) |> ungroup()
@
\pause
\vfill
{\bf Note:} \verb`mutate()` only accepts functions that return a vector of length 1 or of length suitable to create a new column
\end{frame}


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\begin{frame}[fragile, t]{\texttt{summarise()}}
Compute summary statistics using \texttt{summarise()}:\\
<<summarise details>>=
iris_tbl |> summarise(Sepal.Length.max = max(Sepal.Length), N = n())
@
\pause
Compute summary statistics using  \verb`group_by() |> summarise()`:\\
<<summarise details2>>=
iris_tbl |> group_by(Species) |> summarise(Sepal.Length.max = max(Sepal.Length), N = n())
@
\pause
\vfill
{\bf Tip:} \verb`summarise()` ungroup automatically (if there is a single grouping variable)
\end{frame}


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\selectmanualcolour{red!75!black}
\begin{frame}[fragile]{Practice}
\begin{center}
\begin{large}
Assuming petals are rectangular, compute:\\
\vspace{1em}

\begin{minipage}{0.25\linewidth}
\begin{itemize}
\item the mean\dots
\item the median\dots
\item the minimum\dots
\item the maximum\dots
\end{itemize}
\end{minipage}

\vspace{1em}
\dots area of petals for each species
\end{large}
\end{center}
<<echo = FALSE, eval = FALSE>>=
iris |>
  mutate(area_petal = Petal.Length * Petal.Width) |>
  group_by(Species) |>
  summarise(mean = mean(area_petal),
            median = median(area_petal),
            min = min(area_petal),
            max = max(area_petal))
@
\end{frame}
\selectmanualcolour{blue!75!black}


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{lists}


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\begin{frame}[fragile]{Lists}
Lists allow for the organisation of any set of entities into a single R object:\\
\begin{columns}
\column{0.65\linewidth}
<<>>=
iris |> filter(Species %in% c("setosa", "versicolor")) -> iris2sp
test <- t.test(Sepal.Length ~ Species, data = iris2sp)
@
\pause
<<size="tiny">>=
str(test)
@
\pause
\column{0.3 \linewidth}
There are different ways to extract an element from a list:
<<>>=
test[["p.value"]]
test$p.value
pluck(test, "p.value") # {purrr}
@
\pause
\vspace{2em}
{\bf Note:} lists are necessary because, in \r, functions cannot output several objects are once
\end{columns}
\end{frame}


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\section{Importing data}


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\begin{frame}[fragile]{Importing data in \r}
\r \ can read (and write) many formats storing data:
\begin{itemize}
\item tabulated text files (\texttt{*.csv}, \texttt{*.txt}, \dots) $\rightarrow$ no pkg or \verb`{readr}`
\item MS Excel files (\texttt{*.xlsx}) $\rightarrow$ \verb`{readxl}`
\item binary R files (\texttt{*.rda}, \texttt{*.RData}, \texttt{*.rds}) $\rightarrow$ no pkg
\end{itemize}
\vspace{1em}
\dots as well as many other formats (\texttt{*.feather}, \texttt{*.html}, \texttt{*.json}, \texttt{*.sav}, \texttt{*.zip}, \dots)
\end{frame}


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\begin{frame}[fragile]{Importing *.csv tabulated data with \texttt{\{readr\}}}
TIP:
\begin{enumerate}
\item use the GUI
\begin{center}
\includegraphics[height = 5cm]{figures/RStudio_readr.png}
\end{center}
\item copy and paste the \r \ code automatically generated into your script
\end{enumerate}
\textbf{NB:}
\begin{itemize}
\item the same apply for many other file formats!
\item if you don't see "\textbf{From Text (readr)}" then you must install \verb`{readr}`
\end{itemize}
\end{frame}


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\selectmanualcolour{red!75!black}
\begin{frame}[fragile]{Practice}
\begin{center}
\begin{large}
Create a data frame using your favourite spreadsheet software\\ and import the data in \r!
\end{large}
\end{center}
\end{frame}
\selectmanualcolour{blue!75!black}


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\section{Plotting}


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\begin{frame}[fragile]{Plotting systems}
There are many plotting systems in \r, such as:
\vspace{1em}
\begin{itemize}
\item \verb`{graphics}` (build-in system): most efficient for small jobs, but difficult for complex tasks
\item \verb`{lattice}`: difficult, but efficient for complex tasks
\item \verb`{ggplot2}`: easy and efficient for most tasks (but a little verbose)
%\item \verb`{plotly}`: wrapper for the `plotly.js' javascript library, web focused, possible static export\\ (not free for commercial use)
%\item \verb`{highcharter}`: wrapper for the `Highcharts' javascript library, web focused\\ (not free for commercial use)
%\item \verb+{mschart}+: dedicated to Microsoft Word and Microsoft PowerPoint
\end{itemize}
\end{frame}


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\selectmanualcolour{red!75!black}
\begin{frame}[fragile]{Practice: \r \ Graph Gallery}
\begin{center}
\begin{large}
Browse \url{https://r-graph-gallery.com} and try to reproduce one plot you like!
\end{large}
\end{center}
\vfill
\end{frame}
\selectmanualcolour{blue!75!black}


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{introduction to \texttt{\{ggplot2\}}}


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\begin{frame}
\centering
\includegraphics[height = \textheight]{figures/Wickham_ggplot2.jpg}
\end{frame}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\begin{frame}[fragile, t]{You can make nice plots with \texttt{\{ggplot2\}} and companion packages}
\only<1>{@ldbailey255}
\only<2>{@CedScherer / @CedScherer@vis.social}
\only<3>{@geokaramanis}
\only<4>{@\_Alexis\_69\_}
\only<5>{@grssnbchr}
\begin{center}
\only<1>{\includegraphics[height = 7cm]{figures/Week32_Liam}}
\only<2>{\includegraphics[height = 7cm]{figures/2020_08_CarbonFoodprint_alt}}
\only<3>{\includegraphics[height = 7cm]{figures/ggplot2_slavery}}
\only<4>{\includegraphics[height = 7cm]{figures/ggplot2_velos}}
\only<5>{\includegraphics[height = 7cm]{figures/ggplot2_swiss}}
\end{center}
\end{frame}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\begin{frame}[fragile, t]{The grammar of graphics}
All plots are composed of:
\begin{itemize}
  \item Data that you want to visualise
  \item A set of \textbf{aes}thetic mappings describing which variables are mapped to which visual properties
  \item Layers made up of \textbf{geom}etric elements
  \item \textbf{Scale}s describing how values in the data space are mapped to values in an aesthetic space
  \item A \textbf{coord}inate system describing how data coordinates are mapped to the plotted plane
  \item A \textbf{facet}ing specification describing how data are dispatched into sub-plots
  \item A \textbf{theme} that controls the details of the display (font size, background colour\dots)
\end{itemize}
\vfill
\textbf{Note:} the word in \textbf{bold} font correspond to main functions of \verb+{ggplot2}+
\end{frame}


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\begin{frame}[fragile, t]{Building a plot}
We build a plot by adding components together:\\
\vspace{1em}
<<data3>>=
ggplot(iris) + ## the data
  aes(x = Sepal.Length, y = Sepal.Width, colour = Species) +  ## the aesthetic mappings
  geom_point()  ## a layer
@
\vfill
\pause
\textbf{Note:} here, we use the default settings for the scales, coordinate system, faceting specification, and the theme -- they don't need to be explicitly set
\end{frame}


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\begin{frame}[fragile, t]{Building a plot: 3 main steps}
Step 1: we specify the data (a tidy data frame) using \texttt{ggplot()}:\\
\vspace{1em}
<<data>>=
ggplot(iris) ## it calls the plotting device
@
\vfill
\textbf{Note:} you can also write: \verb+iris |> ggplot()+
\end{frame}


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\begin{frame}[fragile, t]{Building a plot: 3 main steps}
Step 2: we specify the aesthetic mappings between the data and aesthetics using \texttt{aes()}:\\
\vspace{1em}
<<mapping>>=
aes(x = Sepal.Length, y = Sepal.Width, colour = Species) ## US spelling (here, color) also works!
@
\vfill
\textbf{Note:} sometimes more terms will be present to map other aesthetics to the data 
\end{frame}


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\begin{frame}[fragile, t]{Building a plot: 3 main steps}
Step 3: we specify one or multiple layer(s) using a \verb+geom_*()+ function:\\
\vspace{1em}
<<layer_geom>>=
geom_point()
@
\vfill
\textbf{Note:} all \verb+geom_*()+ have a  default statistic and position, which you can override
\end{frame}


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{layers}


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\begin{frame}[fragile, t]{Layers: generalities}
Changing the \verb+geom_*()+ call changes how the data are being represented!\\
\vspace{1em}
<<layer_geom_point>>=
ggplot(iris) +
  aes(x = Sepal.Length, y = Sepal.Width) +
  geom_point()
@
\end{frame}


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\begin{frame}[fragile, t]{Layers: generalities}
Changing the \verb+geom_*()+ call changes how the data are being represented!\\
\vspace{1em}
<<layer_geom_line>>=
ggplot(iris) +
  aes(x = Sepal.Length, y = Sepal.Width) +
  geom_line()
@
\end{frame}


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\selectmanualcolour{red!75!black}
\begin{frame}[fragile]{Practice}
\begin{center}
\begin{large}
Plot the distribution of the sepal length of each species of iris using:

\vspace{1em}
\begin{minipage}{0.25\linewidth}
\begin{itemize}
\item \verb`geom_boxplot()`
\item \verb`geom_violin()`
\item \verb`geom_jitter()`
\end{itemize}
\end{minipage}

\end{large}
\end{center}
\end{frame}
\selectmanualcolour{blue!75!black}


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\begin{frame}[fragile, t]{Layers: statistics}
Overriding the \verb`geom_*()` default statistic is sometimes useful:\\
\vspace{1em}
<<layer_ecdf>>=
ggplot(iris) +
  aes(x = Sepal.Length, colour = Species) +
  geom_line(stat = "ecdf")
@
\vfill
\pause
\textbf{Note:} plotting the Empirical Cumulative Distribution Function allows for deriving information from the distribution of the data (more on that later!)
\end{frame}


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\begin{frame}[fragile, t]{Multiple layers}
Several \verb+geom_*()+ call can be used one after another:\\
\vspace{1em}
<<layer_multiples_layers>>=
ggplot(iris) +
  aes(x = Sepal.Length, y = Sepal.Width) +
  geom_point() +
  geom_line() +
  geom_rug(sides = "r") ## r for right!
@
\vfill
\pause
\textbf{Note:} the order can matter since the layers are drawn from top to bottom
\end{frame}


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{aesthetics}


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\begin{frame}[fragile, t]{Aesthetics attributes: generalities}
The \texttt{geom\_*()} functions rely on aesthetics attributes.\\
\vspace{1em}
Some aesthetics are compulsory, others are optional.\\
\vspace{1em}
Examples of aesthetics:
\begin{itemize}
  \item position: \texttt{x, y, xmin, xmax, ymin, ymax...}
  \item colours: \texttt{colour} and \texttt{fill}
  \item transparency: \texttt{alpha}
  \item sizes: \texttt{size} and \texttt{width}
  \item shape: \texttt{shape} and \texttt{linetype}
\end{itemize}
\vfill
\textbf{Tip:} check the help of the geom(s) you want to use to know which aesthetics can be used!
\end{frame}


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\begin{frame}[fragile, t]{Aesthetics: where to provide the aesthetic mappings?}
If the \texttt{aes()} call is outside a function, it applies to all geoms:\\
\vspace{1em}
<<aes>>=
ggplot(iris) +
  aes(x = Sepal.Length, y = Sepal.Width, colour = Species) +
  geom_point() +
  geom_line()
@
\end{frame}


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\begin{frame}[fragile, t]{Aesthetics: where to provide the aesthetic mappings?}
You can split the definition of global and local aesthetic mappings:\\
\vspace{1em}
<<aes quad>>=
ggplot(iris) +
  aes(x = Sepal.Length, y = Sepal.Width) +
  geom_point() +
  geom_line(aes(colour = Species))
@
\end{frame}


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\begin{frame}[fragile, t]{Aesthetics: where to provide the aesthetic mappings?}
Aesthetics \underline{not} mapped to the data should not be part of any call to \texttt{aes()}!\\
\vspace{1em}
<<aes2>>=
ggplot(iris) +
  aes(x = Sepal.Length, y = Sepal.Width) +
  geom_point(colour = "blue")
@
\end{frame}


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{facultative grammar}


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\begin{frame}[fragile, t]{Scales}
You can use \verb`scale_*()` to change properties of each aesthetic attribute; e.g.:\\

\vspace{1em}
<<scale>>=
ggplot(iris) +
  aes(x = Sepal.Length, y = Sepal.Width, colour = Species) +
  geom_point() +
  scale_x_continuous(breaks = c(5, 6, 7), labels = c("<- small", "<- medium ->", "large ->")) +
  scale_colour_manual(values = c("red", "orange", "purple"))
@
\end{frame}


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\begin{frame}[fragile, t]{Coordinates}
You can use \verb`coord_*()` to modify how graphical elements are projected on a plan; e.g.:\\
\vspace{1em}
<<coord log>>=
ggplot(iris) +
  aes(x = Sepal.Length, y = Sepal.Width, colour = Species) +
  geom_point() + 
  coord_trans(y = "log10", ylim = c(1.5, 5))
@
\end{frame}


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\begin{frame}[fragile, t]{Facets}
You can use \verb`facet_*()` to show different subsets of the data separately; e.g.:\\
\vspace{1em}
<<facet wrap>>=
ggplot(iris) +
  aes(x = Sepal.Length, y = Sepal.Width) +
  geom_point() +
  facet_wrap(~ Species)
@
\end{frame}


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{themes}


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\begin{frame}[fragile, t]{Themes: generalities}
Themes control the display of all elements of the plot that do not depend on your data:\\
\vspace{1em}
\begin{itemize}
  \item titles
  \item labels
  \item fonts
  \item background
  \item gridlines
  \item legends
  \item \dots
\end{itemize}
\vfill
\textbf{Note:} see \texttt{?theme()} for an exhaustive list of all that can be changed
\end{frame}


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\begin{frame}[fragile, t]{Themes: pre-defined themes}
There are many predefined themes in \verb+{ggplot2}+ and companion packages (e.g. \verb+{ggthemes}+):\\
\vspace{1em}
<<theme baseline>>=
ggplot(iris) +
  aes(x = Sepal.Length, y = Sepal.Width, colour = Species) +
  geom_point() -> myplot
@
\begin{columns}
\column{0.3\linewidth}
<<theme void, out.width = "\\linewidth">>=
myplot +
  theme_void()
@
\column{0.3\linewidth}
<<theme dark, out.width = "\\linewidth">>=
myplot +
  theme_dark()
@
\column{0.3\linewidth}
<<theme minimal, out.width = "\\linewidth">>=
myplot +
  theme_minimal(base_size = 20)
@
\end{columns}
\vfill
\pause
\textbf{Tip:} \texttt{base\_size} controls the base font size for any theme
\end{frame}


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\begin{frame}[fragile, t]{Themes: modifying themes}
To modify the theme yourself, use \texttt{theme()} in combination with \texttt{element\_*()}:\\
\vspace{1em}
<<theme, out.width = "6cm">>=
ggplot(iris) +
  aes(x = Sepal.Length, y = Sepal.Width, colour = Species) +
  geom_point() +
  theme(axis.text = element_text(size = 15, face = "bold", colour = "red"),
        axis.title = element_text(face = "italic", hjust = 1),
        panel.grid.major.x = element_line(linetype = "dotted", colour = "black"),
        panel.background = element_rect(fill = "lightgreen"),
        plot.background = element_rect(fill = "dodgerblue", colour = "goldenrod", linewidth = 10))
@
\end{frame}


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{others}


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\begin{frame}[fragile, t]{Adding labels}
You can set all the labels easily using \texttt{labs()}:\\
\vspace{1em}
<<text2, out.width = "6cm">>=
ggplot(iris) +
  aes(x = Sepal.Length, y = Sepal.Width) +
  geom_point() +
  labs(x = "Length", y = "Width",
       title = "Sepal morphology", subtitle = "a toy analysis of the iris dataset",
       caption = "Dataset provided by R",
       tag = "A).")
@
\end{frame}


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\begin{frame}[fragile, t]{Saving plots}
You can export your plots using \texttt{ggsave()}:\\
\vspace{1em}
<<save, eval = FALSE>>=
ggplot(iris) +
  aes(x = Sepal.Length, y = Sepal.Width, colour = Species) +
  geom_point()

ggsave("my_first_plot.pdf", width = 15, height = 10, units = "cm")
@
\vfill
{\bf Note:} by default, the plot is saved in your project directory
\end{frame}


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\section{Programming}


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\begin{frame}[fragile]{Usual programming commands exist in \r}
<<>>=
for (i in 1:4) {
  if (i == 2) {
    print(x = "found 2!")
  } else {
    print(x = "found something other than 2")
  }
}
@
\vspace{1em}
\pause
You can check the help files for such functions as follows:
<<tidy=F, eval=F>>=
?"for"
@
\vspace{1em}
{\bf Note:} the quotes are necessary because the parser considers that such words are special
\end{frame}


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\begin{frame}[fragile]{You can create your own \r \ functions!}
Creating functions only requires you to name the function \&\\
to rely on placeholders (i.e. arguments) to pass values:\\
\vspace{1em}
<<>>=
OddsRatio <- function(proba.x, proba.y) {
  odd.x <- proba.x/(1 - proba.x)
  odd.y <- proba.y/(1 - proba.y)
  odd.x/odd.y
}
@
\vspace{1em}
\pause
Then you can use them as any other functions:
<<>>=
OddsRatio(0.1, 0.01)
@
\end{frame}


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\section{Housekeeping}


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\begin{frame}[fragile]{What should you do?}
\begin{itemize}[<+->]
\item update your \r \ packages frequently $\rightarrow$ at least once a month
<<update, eval = FALSE>>=
update.packages(ask = FALSE)  ## or use RStudio menus
@
\item update \r \ from time to time $\rightarrow$ at least once a year in spring\\
do it manually, or try \verb+{InstallR}+ on Windows, or \verb+{UpdateR}+ on macOS
\item update RStudio from time to time $\rightarrow$ at least after each update of \r
\end{itemize}
\vfill
\textbf{NB:}\\
you can check what is being changed in \texttt{NEWS} files
\end{frame}


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\section{Learning on your own}


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\begin{frame}{Useful resources}
RStudio cheatsheets; e.g.:
\begin{center}
\includegraphics[width=0.5\linewidth]{figures/base-r_for_slides.pdf}
\end{center}
\vfill
\textbf{NB:} there are many cheatsheets covering many aspects of \r \ and several packages!
\end{frame}


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\begin{frame}[t]{Useful resources}
Official documentation:
\begin{itemize}
\item the help files: every single (exported) function has a help file associated with it!
\item official manuals: \url{https://cran.r-project.org/manuals.html}
\end{itemize}
\vfill
\pause
Best books for you (roughly sorted by amount of conceptual content):
\begin{center}
\begin{figure}
\begin{subfigure}[b]{2.4cm}
\centering
\includegraphics[height=3.5cm]{figures/bookBecksi}
\caption*{$\sim 30$ \euro}
\end{subfigure}
\begin{subfigure}[b]{2.4cm}
\centering
\includegraphics[height=3.5cm]{figures/Book_r4ds.png}
\caption*{$\sim 60$ \euro}
\end{subfigure}
\begin{subfigure}[b]{2.4cm}
\centering
\includegraphics[height=3.5cm]{figures/Rbook2}
\caption*{$\sim 35$ \euro}
\end{subfigure}
\begin{subfigure}[b]{2.4cm}
\centering
\includegraphics[height=3.5cm]{figures/Dalgaard_book}
\caption*{$\sim 40$ \euro}
\end{subfigure}
\begin{subfigure}[b]{2.4cm}
\centering
\includegraphics[height=3.5cm]{figures/Rbook}
\caption*{$\sim 60$ \euro}
\end{subfigure}
\end{figure}
\end{center}
\vfill
\pause
Journal of Statistical Software, \r \ Journal, Journal of Open Source Software \dots
\end{frame}


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\begin{frame}{Become part of the \r \ community!}
\begin{columns}[T]
\column{0.6\linewidth}
\begin{itemize}
\item face-to-face interactions:
\begin{itemize}
\begin{scriptsize}
\item Meetup Berlin R Users Group (\url{https://www.meetup.com/Berlin-R-Users-Group})
\item R-Ladies (\url{https://rladies.org/germany-rladies})
\item SATRDAYS (\url{https://satrdays.org/events})
\item European R Users Meeting (\url{https://erum.io})
\item \texttt{rstudio::conf} (\url{https://posit.co/conference})
\item useR! (\url{https://www.r-project.org/conferences})
\end{scriptsize}
\end{itemize}
\vfill
\pause
\item websites:
\begin{itemize}
\begin{scriptsize}
\item \url{https://stackoverflow.com/questions/tagged/r}
\item \url{https://community.rstudio.com}
\item \url{https://www.r-bloggers.com}
\item \url{https://rfordatascience.slack.com}
\end{scriptsize}
\end{itemize}
\vfill
\pause
\item mailing lists:
\begin{itemize}
\begin{scriptsize}
\item \url{https://www.r-project.org/mail.html}
\end{scriptsize}
\end{itemize}
\end{itemize}
\pause
\column{0.4\linewidth}
\begin{itemize}
\item twitter:
\begin{itemize}
\begin{scriptsize}
\item \#rstats
\item \#tidyverse
\item @rdataberlin (and check the people I follow in there)
\end{scriptsize}
\end{itemize}
\item mastodon:
\begin{itemize}
\begin{scriptsize}
\item fosstodon.org
\item \#rstats
\end{scriptsize}
\end{itemize}
\end{itemize}
\end{columns}
\end{frame}



%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\begin{frame}{The best person who can teach you \r\ may be yourself}
\begin{center}
\huge{\large{Once you know some basics, you should be able to start learning on your own\\ by simply performing experiments in your \r \ console!}}
\end{center}
\end{frame}

\end{document}
