\documentclass[xcolor=dvipsnames, aspectratio=1610, 11pt]{beamer}
\usepackage[utf8]{inputenc}
\usepackage[T1]{fontenc} % so that dollar sign does not turn into pound when italic!!
\usepackage{amsmath,amssymb,lmodern} % nice T1 compatible fonts
\usepackage[UKenglish]{babel}
\usepackage{pdfpages} % to import pdf pages
\usepackage{ragged2e} % pour justifier le text, après il suffit de tapper \justifying avant le paragraphe
\usepackage{subcaption} % for captions below figures
\usepackage{eurosym} % for euro sign

\setbeamertemplate{navigation symbols}{}%no nav symbols
\usetheme[]{Madrid}%
\usepackage{colourchange}% to change theme colours on the go

\def\r{{\bf R}}

\title{20 Things to Know About \r}
\author[Alex / \url{www.datazoogang.de} / @rdataberlin]{Alexandre Courtiol}
\institute[]{Leibniz Institute of Zoo and Wildlife Research}%
\titlegraphic{
\vspace{1cm}
\centering
\includegraphics[height=1.5cm]{figures/izw_logo}
\hspace{2cm}
\includegraphics[height=1.5cm]{figures/FU}
}
\date[September 2022]{\small September 2022}%

\begin{document}
\selectmanualcolour{blue!75!black}%set main colour
\setlength{\topsep}{1pt} % space between input and output

<<knitr options, echo = FALSE, message = FALSE>>=
options(width = 100, 
        tibble.print_min = 3,
        tibble.print_max = 3)
library(knitr)
opts_chunk$set("size" = "scriptsize",
               "error" = TRUE,
               "fig.align" = "center",
               fig.width = 6,
               fig.asp = 0.64,
               out.width = "7cm",
               cache = FALSE)
@

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\begin{frame}
\titlepage
\end{frame}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\begin{frame}{20 Things to Know About \r}
  \setcounter{tocdepth}{1}
  \begin{scriptsize}
  \tableofcontents
  \end{scriptsize}
\end{frame}


\section{What are \r\ and RStudio?}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\begin{frame}[t]{1. What are \r\ and RStudio?}
Why learning \r?
\vspace{1em}
\begin{itemize}
\item best software out there for most data science tasks
\item open source and free
\item possible to learn for people with no background in computer science
\item rich in functionality with close to 100,000 free packages\\ {\scriptsize (\url{https://rdrr.io}; \url{https://www.rdocumentation.org})}
\item friendly large community\\ {\scriptsize (twitter \#rstats, \url{https://rfordatascience.slack.com}, \url{https://community.rstudio.com}, gatherings)}
\end{itemize}
\vfill
RStudio is a GUI to \r\ that is fancier and more modern than the one provided by default
\end{frame}


\section{How to best setup \r\ \& RStudio?}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\begin{frame}[fragile]{2. How to best setup \r\ \& RStudio?}
Open: Menu / Tools / Global options and set things as follows:
\begin{columns}
\column{0.5\linewidth}
\begin{center}
Never save or restore the workspace!
\includegraphics[height=0.7\textheight]{figures/RStudio_settings.png}
\end{center}
\column{0.5\linewidth}
\begin{center}
Activate code diagnostics
\includegraphics[height=0.7\textheight]{figures/RStudio_settings3.png}
\end{center}
\end{columns}
\end{frame}


\section{How to best organise your work?}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\begin{frame}[fragile]{3. How to best organise your work?}
Before you start some new work in \r,
  \begin{enumerate}
    \item create a new RStudio project (Menu / File / New Project... / \dots)
    \item create a new \r \ Script file (Menu / File / New File / R Script)
    \item save the created \r \ Script file into the project folder directory
  \end{enumerate}
\vfill
\textbf{NB:}
\begin{itemize}
\item an RStudio project is a folder containing the different files for a given project, including a simple project file that allows you to open RStudio with the correct working directory set
\item an \r \ Script is a (text) file where you can write \r \ code
\item alternatives to \r \ Scripts exist to implement your work if you need to format text around your code (e.g. \r \ Markdown files)
\end{itemize}
\end{frame}


\section{How to write reproductible code?}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\begin{frame}[fragile]{4. How to write reproductible code?}
Best practice:
\vspace{1em}
\begin{enumerate}
\item only use the \texttt{Console} pane to mess around
\item write proper \r \ code in the \texttt{Source} pane
\item comment thoroughly your \r \ script using \# signs
\item re-run frequently your entire script to make sure that it works\\
(after restarting the session: Menu / Session / Restart R)
\item write down the version of the packages you are using as comments
\end{enumerate}
\begin{center}
\includegraphics[height = 4cm]{figures/rstudio_2020.png}
\end{center}
\end{frame}


\section{How to use \r\ as a simple calculator?}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\begin{frame}[fragile]{5. How to use \r\ as a simple calculator?}
\begin{columns}[T]
\column{0.5\linewidth}
\r \ can perform basic arithmetic:
<<arithmetic>>=
1 + 1
1 - 1
2 * pi
3 / 2
5^2
5^(2 + 1)
Inf/Inf
@

\column{0.5\linewidth}
\pause
\r \ can perform logical operations:
<<logic1>>=
1 == 1
(1 == 1) & (1 == 2)
(1 == 1) | (1 == 2)
1 != 2
!(1 == 2)
2 >= 1
2 < 1
@
\end{columns}
\pause
\vspace{1em}
As for most other programming languages, avoid equality tests for floating-point numbers!
<<logic4>>=
0.8 - 0.3 - 0.5 == 0.8 - 0.5 - 0.3 ## some functions should be used instead
@
\end{frame}


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\selectmanualcolour{red!75!black}
\begin{frame}[fragile]{Practice}
\vfill
\begin{center}
\begin{Huge}
Compute {\Huge $\sqrt{\frac{2^{3+1}}{\frac{4}{5\times{6}}}-20}$} % = 10
\end{Huge}
\end{center}
\vfill
NB: {\large $\sqrt{x} = x^\frac{1}{2}$}
\end{frame}
\selectmanualcolour{blue!75!black}


\section{How to store the results of operations?}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\begin{frame}[fragile]{6. How to store the results of operations?}
The results of operations are stored into \emph{objects} that are created using the ``arrow'' assignment operator:
<<one plus one>>=
one_plus_one <- 1 + 1 ## storing the result
@
\pause
\vfill

Objects can then be used through their name (that is the whole point):

<<display one plus one>>=
one_plus_one ## displaying the result
one_plus_one_plus_one <- one_plus_one + 1
one_plus_one_plus_one
@
\pause
\vfill

{\bf Tips:}
<<one times two>>=
(one_times_two <- 1 * 2) ## storing and displaying the result at once
@
\vfill
\pause
\begin{itemize}
\item \verb+->+ works too (if you switch the left hand side and the right hand side)
\item ``\texttt{\_}'' and ``\texttt{.}'' are OK but avoid spaces \& other weird characters in names
\item names are case sensitive
\end{itemize}
\end{frame}


\section{How to do things beyond simple algebra?}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\begin{frame}[fragile]{7. How to do things beyond simple algebra?}
For doing more complex things, one has to use \emph{functions}:
\vspace{1em}
<<using functions>>=
vector_x <- c(1, 4, 10)
@
<<using functions2>>=
mean_x <- mean(x = vector_x)
mean_x
@
<<using functions3>>=
sd_x <- sd(x = vector_x)
sd_x
@
<<using functions4>>=
cv_x <- sd_x/mean_x
cv_x
@
<<using functions5>>=
round(x = cv_x, digits = 2)
@
\vfill
Note: all what is written in red above are functions
\end{frame}


\section{How to use a new function?}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\begin{frame}[fragile]{8. How to use a new function?}
Before using a new function, it is a good idea to check its documentation:
\vspace{1em}
<<eval=F, echo=T>>=
mean()
@
<<eval=F, tidy=F>>=
?mean()
@
\begin{scriptsize}
\begin{verbatim}
Usage:
     mean(x, ...)
     ## Default S3 method:
     mean(x, trim = 0, na.rm = FALSE, ...)
     
Arguments:
       x: An R object.  Currently there are methods for numeric/logical
          vectors and date, date-time and time interval objects, and
          for data frames all of whose columns have a method.  Complex
          vectors are allowed for ‘trim = 0’, only.
    trim: the fraction (0 to 0.5) of observations to be trimmed from
          each end of ‘x’ before the mean is computed.  Values of trim
          outside that range are taken as the nearest endpoint.
   na.rm: a logical value indicating whether ‘NA’ values should be
          stripped before the computation proceeds.
[...]
\end{verbatim}
\end{scriptsize}
\end{frame}


\section{How to decipher complex function calls?}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\begin{frame}[fragile]{9. How to decipher complex function calls?}
In \r, it is easy to write synonymous code that \emph{looks} very different:
\vspace{1em}

Example 1:
<<complex fn call 1>>=
round(mean(c(1, 4, 10))/sd(c(1, 4, 10)), 2)
@
\vfill
\pause
Example 2:
<<complex fn call 2>>=
c(1, 4, 10) |>
  mean() |>
  prod(1/sd(c(1, 4, 10))) |>
  round(2)
@
\vfill
\pause
\begin{itemize}
\item To decipher the first example, run things from the inside out, step-by-step
\item To decipher the second example, run things adding one line at a time\\ (always skipping the final pipe)
\end{itemize}
\vfill
Here the implementation from Example 1 is easier to read, but this is not always the most natural way to write
\end{frame}


\section{How to import data in \r?}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\begin{frame}[fragile]{10. How to import data in \r?}
\r \ can read (and write) many formats storing data, such as:
\begin{itemize}
\item tabulated text files (\texttt{*.csv}, \texttt{*.txt}, \dots) $\rightarrow$ no pkg or \verb`{readr}`
\item MS Excel files (\texttt{*.xlsx}) $\rightarrow$ \verb`{readxl}`
\item binary R files (\texttt{*.rda}, \texttt{*.RData}, \texttt{*.rds}) $\rightarrow$ no pkg
\end{itemize}
\vspace{1em}
For importing data you can often simply rely on the GUI\\ {\scriptsize (but for reproducibility do copy and paste the \r \ code automatically generated into your script!)}:
\begin{center}
\includegraphics[height = 5cm]{figures/RStudio_readr.png}
\end{center}
\end{frame}


\section{How to manipulate data frames?}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\begin{frame}[fragile, t]{11a. How to manipulate data frames?}
The most common class of objects used for storing data in \r \ is the \underline{data frame}!\\
\vspace{1em}
Example: the \texttt{calibration\_example1} dataset
<<df, message = FALSE>>=
library(readr)
calibration <- read_csv("data/calibration_example1.csv")
calibration
@
\vfill
\begin{itemize}
\item each column is a variable, usually corresponding to a \underline{vector}\\ {\scriptsize (a series of elements of 1 type)}
\item all columns have the same length {\scriptsize (rectangular format)}
\item contains column names {\scriptsize (usually informative)} and row names {\scriptsize (usually not informative)}
\item a \texttt{tibble} is one of the possible formats for data frames, but all formats work similarly
\end{itemize}
\end{frame}


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\begin{frame}[fragile, t]{11b. How to manipulate data frames?}
<<df2>>=
calibration$y.tissue ## extract vector
@
\pause
<<df3>>=
calibration[calibration$site == "B", c("lat", "long", "y.tissue")]  ## filter rows and columns
@
\pause
<<df4>>=
calibration$sd.y.tissue <- NULL ## delete a column
calibration$species <- "my species" ## add a column
calibration
@
\end{frame}


\section{How to manipulate lists?}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\begin{frame}[fragile]{12. How to manipulate lists?}
Most functions doing something more complicated than simple arithmetic produce lists:\\
<<>>=
calib2sp <- calibration[calibration$site %in% c("A", "C"), ]
test_calib2sp <- t.test(y.tissue ~ lat, data = calib2sp)
@
\pause
\begin{columns}[T]
\column{0.65\linewidth}
<<size="tiny">>=
str(test_calib2sp) ## reveals the (often hidden) structure of the list
@
\pause
\column{0.3 \linewidth}
You can extract named elements from lists as vectors in data frames:
<<>>=
test_calib2sp$p.value
@
\vspace{5em}
You can extract elements from lists (named or not) using indexes too:
<<>>=
test_calib2sp[[3]]
@
\end{columns}
\end{frame}


\section{How to manipulate vectors?}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\begin{frame}[fragile]{13. How to manipulate vectors?}
You can replace elements:
<<vec0>>=
calibration$y.tissue[1] <- NA ## change is saved!
@
\vspace{1em}
\pause
You can select multiple elements:
<<vec1>>=
calibration$y.tissue[1:10] ## change is not saved unless you assign it
@
\vspace{1em}
\pause
You can select multiple using a vector of \texttt{logicals}:
<<vec3>>=
calibration$site == "A"
calibration$y.tissue[calibration$site == "A"]
@
\vspace{1em}
\pause
You can remove elements:
<<vec2>>=
calibration$y.tissue[-2]
@
\end{frame}


\section{How to use packages?}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\begin{frame}[fragile]{14. How to use packages?}

Packages extend \r \ functionalities:
\begin{itemize}
\item for most users; e.g. \verb+{dplyr}+, \verb+{ggplot2}+
\item for specific users; e.g. \verb+{IsoriX}+, \verb+{MixSIAR}+
\item for developers creating packages; e.g. \verb+{devtools}+, \verb+{Rcpp}+
\end{itemize}
\vspace{1em}
\pause
Simple installation (once per \r\ installation):
\begin{center}
\includegraphics[height = 3cm]{figures/RStudio_packages_installation.png}
\end{center}
\vspace{1em}
\pause
Loading (once per session):
<<results="hide", message=FALSE>>=
library(dplyr)
@
\end{frame}


\section{How to use \texttt{\{dplyr\}} for an efficient manipulation of data frames?}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\begin{frame}[fragile, t]{15. How to use \texttt{\{dplyr\}} for an efficient manipulation of data frames?}
You can all kind of data manipulation by combining 5 simple functions from \texttt{\{dplyr\}}:\\
\vspace{1em}
\begin{itemize}
\item \texttt{select()}    to keep or discard columns
\item \texttt{group\_by()} to define groups of rows for the following verbs
\item \texttt{filter()}    to keep or discard rows
\item \texttt{mutate()}    to create new columns
\item \texttt{summarise()} to compute summary statistics
\end{itemize}
\vspace{1em}
\pause
Example:
<<grouped df>>=
calibration |>
  filter(site != "A") |>
  mutate(y.tissue.not.permil = y.tissue / 1000) |>
  group_by(site) |>
  summarize(mean_per_site = mean(y.tissue.not.permil))
@
\end{frame}


\section{How to plot things?}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\begin{frame}[fragile]{16. How to plot things?}
There are many plotting systems in \r, such as:
\vspace{1em}
\begin{itemize}
\item \verb`{graphics}` (build-in system): most efficient for small jobs, but difficult for complex tasks
\item \verb`{lattice}`: difficult, but efficient for complex tasks
\item \verb`{ggplot2}`: easy and efficient for most tasks (but quite verbose)
\end{itemize}
\begin{columns}
\column[b]{0.32\linewidth}
<<baseplot_eg, out.width = "0.7\\linewidth", size = "tiny">>=
plot(y.tissue ~ lat,
     data = calibration)
@
\column[b]{0.32\linewidth}
<<lattice_eg, out.width = "0.7\\linewidth", size = "tiny">>=
library(lattice)

xyplot(y.tissue ~ lat,
       data = calibration)
@
\column[b]{0.32\linewidth}
<<ggplot_eg, out.width = "0.7\\linewidth", warning = FALSE, size = "tiny">>=
library(ggplot2)

ggplot(data = calibration,
  aes(x = lat, y = y.tissue)) +
  geom_point()
@
\end{columns}
Whatever you are using, plotting your data is very important! Defaults are always quite ugly!!
\end{frame}


\section{How to use \texttt{\{ggplot2\}} for an efficient production of plots?}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\begin{frame}[fragile, t]{17. How to use \texttt{\{ggplot2\}} for an efficient production of plots?}
All plots are composed of the same elements:\\
\vspace{1em}
\begin{scriptsize}
\textbf{data} + \textbf{aes}thetic mappings + \textbf{geom}etries + \textbf{scale}s + a \textbf{coord}inate system + a \textbf{theme} + a \textbf{facet}ing specification\\
(the first 3 are mandatory, the last 4 are not since they have default presets)\\
\end{scriptsize}
\vspace{1em}
We then build a plot by adding such components together:\\
\vspace{1em}
<<layer_multiples_layers, out.width = "0.3\\linewidth", out.height = "0.2\\linewidth", warning = FALSE, size = "tiny">>=
ggplot(calibration) +
  aes(x = lat, y = y.tissue, colour = site) +
  geom_point() +
  geom_rug(sides = "l") + ## l for left!
  scale_x_continuous("Lattitude") +
  theme_minimal()
@
\vfill
\textbf{Note:} check \url{https://www.r-graph-gallery.com} for examples
\end{frame}


\section{When to update what?}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\begin{frame}[fragile]{18. When to update what?}
Update:
\begin{itemize}
\item \r\ (at least once a year)
\item RStudio (after each update of \r)
\item packages (at least once a month)
\end{itemize}
\vspace{1em}
For packages:
\begin{center}
\includegraphics[height=0.6\textheight]{figures/RStudio_packages_update.png}
\end{center}
\end{frame}


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\section{How to reach the level A2/B1?}


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\begin{frame}{19. How to reach the level A2/B1?}
There are many resources available at your disposal:
\begin{columns}
\column{0.6\linewidth}
\begin{itemize}
\item tons of online tutorials, videos, forums\dots
\item RStudio cheatsheets
\vfill
\item Official documentation (help files + \url{https://cran.r-project.org/manuals.html})
\vfill
\item Books (not always free):
\end{itemize}
\column{0.3\linewidth}
\begin{center}
\includegraphics[width=\linewidth]{figures/base-r_for_slides.pdf}
\end{center}
\end{columns}
\begin{center}
\begin{figure}
\begin{subfigure}[b]{2.4cm}
\centering
\includegraphics[height=3.5cm]{figures/bookBecksi}
\caption*{$\sim 30$ \euro}
\end{subfigure}
\begin{subfigure}[b]{2.4cm}
\centering
\includegraphics[height=3.5cm]{figures/Book_r4ds.png}
\caption*{$\sim 0$ or $60$ \euro}
\end{subfigure}
\begin{subfigure}[b]{2.4cm}
\centering
\includegraphics[height=3.5cm]{figures/Rbook2}
\caption*{$\sim 35$ \euro}
\end{subfigure}
\begin{subfigure}[b]{2.4cm}
\centering
\includegraphics[height=3.5cm]{figures/Dalgaard_book}
\caption*{$\sim 40$ \euro}
\end{subfigure}
\begin{subfigure}[b]{2.4cm}
\centering
\includegraphics[height=3.5cm]{figures/Rbook}
\caption*{$\sim 60$ \euro}
\end{subfigure}
\end{figure}
\end{center}
\end{frame}


\section{How to reach levels beyond B1?}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\begin{frame}{20. How to reach levels beyond B1?}
This is not beyond your reach!
\begin{itemize}
\item try to help less advanced colleagues
\item look at the code of more advanced \r\ geeks
\item act as a scientist: once you know some basics, if you notice something that does not behave as you thought it should, make hypotheses and test them
\item try to contribute to collaborative \r\ projects (e.g. on GitHub)
\end{itemize}
\vfill
If you persist, you will become very good at \r\ no matter how difficult you may find it now!
\end{frame}

\end{document}
